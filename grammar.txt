expr        : var ident = expr
	        : comp-expr ((and|or) comp-expr) *
comp-expr	: not comp-expr
			: arith-expr ((== | < | > | <= | >=) arith-expr) *
arith-expr	: term ((+ | -) term)*
term		: factor ((* | /) factor)*
factor		: (+ | -) factor
			: power
power		: call (power factor)*
call		: atom (lpar (expr (comma expr)*)? rpar)?
atom 		: int | float | ident
			: lpar expr rpar
			: if-expr
			: for-expr
			: while-expr
if-expr		: if expr then expr (elif expr then expr)* (else expr)?
for-expr	: for ident = expr to expr (step expr)? then expr
while-expr	: while expr then expr