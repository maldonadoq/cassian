expr		: var ident = expr
			: comp-expr ((and|or) comp-expr) *
comp-expr	: not comp-expr
			: arith-expr ((== | < | > | <= | >=) arith-expr) *
arith-expr	: term ((+ | -) term)*
term		: factor ((* | /) factor)*
factor		: (+ | -) factor
			: power
power		: call (^ factor)*
call		: atom (lpar (expr (comma expr)*)? rpar)?
atom 		: int | float | string |ident
			: lpar expr rpar
			: list-expr
			: if-expr
			: func-def
list-expr	: lsqu (expr (comma expr)*)? rsqu
if-expr		: if expr then expr (elif expr then expr)* (else expr)?
func-def	: fun ident? lpar (ident (comma ident)*)? rpar arrow expr